[{"title":"虚拟摇杆（Joystick）的实现原理.md","url":"/2019/12/10/虚拟摇杆（Joystick）的实现原理-md/","content":"\n# 虚拟摇杆（Joystick）的实现原理\n\n\n## 三个组成对象\n在移动端，用虚拟摇杆来控制物体的移动是一种体验非常棒的交互方式。这个笔记中，注重分享摇杆的实现原理，与语言和平台无关，后面会有一个用 JS 实现的在线演示 Demo。\n\n摇杆通常由三个部分组成：摇杆按钮、摇杆滑块、滑块运动范围。\n\n滑块运动范围决定了滑块最大偏移摇杆按钮的长度，也决定了**第一次触摸事件的响应范围**。\n\n如下图所示，左边是没有事件输入时的样子，通常虚线框的响应范围是透明的，大小根据业务交互来定，而滑块在没有事件输入时是不显示的。右边是触发 Touch 事件后，滑块显示在手指滑动的位置与方向。\n\n![图示1](https://tva1.sinaimg.cn/large/006tNbRwgy1g9skjcyrkwj318g0m8mym.jpg)\n\n## 输出值的计算方式\n从上图的右边可以看出，在摇杆的运动中，我们能得到两个值，一个是原点（第一次点击屏幕的坐标点，这里我们假设是摇杆按钮的中心点）与滑块中心点的距离。以这个距离为半径，摇杆按钮中心为圆心，画一个圆，能得到滑块在这个圆上的角度。\n\n这个距离值可以反映到要控制的物体的运动速度，角度可以反映到我们要控制的物体的运动方向。\n\n![图示2](https://tva1.sinaimg.cn/large/006tNbRwgy1g9skjfg87ij318g0m80u6.jpg)\n\n### 距离\n距离的求出比较简单，计算两个点的坐标之间的距离即可，此时滑块运动范围是这个距离的最大值，我们可以根据这个最大值与距离的比例来决定我们的运动速度。以 JS 为例：\n```javascript\nMath.sqrt(\n(y2 - y1) * (y2 - y1) +\n(x2 - x1) * (x2 - x1)\n)\n```\n\n### 角度\n根据三角函数可以得到 α 的角度，这个角度就是我们要输出的值，计算步骤：\n1. 求出 Delta Y，也就是绿色线条的长度，`deltaY = y2 - y1`\n2. 求出 Delta X，也就是黄色线条的长度，`deltaX = x2 - x1`\n3. 用反三角函数公式计算 α 的弧度 radian，以 JS 为例： `Math.atan(deltaY, deltaX)`\n4. 再转角度  `degree = radian * 180 / PI`\n\n这里得到的角度值是以 X 轴为零点，如果我们这里是以 12 点钟方向为零点，这里计算的角度还需要再加 90 度再模 360。具体可以根据业务的需要做修改。\n\n## 摇杆的交互实现\n### 摇杆按钮\n大部分的按钮，只是一个静态的 UI，告诉用户这里有一个虚拟摇杆，不需要在交互中做出修改。如果原点是动态的，那摇杆按钮需要移动到原点坐标。\n\n### 摇杆滑块\n#### 方向\n滑块的方向总是等于我们手指相对原点（摇杆按钮中心点）运动的方向。所以可以用上面获取的角度值来修改滑块的旋转角度。\n\n#### 回弹\n当抬起手指后，滑块需要回弹到摇杆按钮的中心点，这里的可以使用各个平台下的 tween 类库来实现缓动回弹。上面提到的角度旋转为了更好的感官体验，也可以使用 tween 类库来做。\n\n### 事件的响应\n虚拟摇杆的实现涉及到这三个事件，可能各个平台略有不同，下面简单的列出每个事件要处理的逻辑。\n\n#### TouchBegin\n1. 获取第一个手指点击的位置\n2. 记录坐标点，定为原点\n3. 显示滑块\n4. 把滑块的坐标设置成原点坐标\n5. 如果移动摇杆按钮，记录摇杆按钮当前位置为中心点，将摇杆按钮移动到原点\n\n#### TouchMove\n1. 获取新的手指位置\n2. 获取上一次手指位置\n3. 计算差值，得出新的滑块位置\n4. 计算新位置与原点的角度\n5. 计算新位置与原点的距离\n6. 设置滑块旋转角度\n7. 防止超出滑块的最大距离，修正新的滑块位置\n8. 将滑块移动到新的位置\n9. 保存当前手指位置\n\n#### TouchEnd\n1. 回弹滑块\n2. 滑块回弹结束后消失\n3. 如果移动滑块按钮，将摇杆按钮重置回中心点\n\n## DEMO 演示（JS 实现）\n<iframe src=\"https://joystick.stackblitz.io/\" width=\"700px\" height=\"500px\" frameborder=\"0\" scrolling=\"no\"> </iframe>\n\n[代码地址](https://stackblitz.com/edit/joystick)\n\n## 获取输入值之后\n根据具体业务，可以自行封装几个事件，用于值的输出。\n\n### 计算运动速度\n根据滑块离原点的距离与最大运动范围的比例，我们可以对速度进行线性的关联，也可以分段离散来实现速度状态机。\n\n### 计算运动方向\n根据速度，再结合方向角度，利用三角函数可以计算 x, y 的运动分量。用分量计算新的物体位置。\n\n## PS\n后续会使用 Rx.js 来实现这个组件，并对其进行封装。","tags":["笔记"]},{"title":"2019 Learning In Depth","url":"/2019/02/13/2019-Learning-In-Depth/","content":"\n这个计划在春节前就写好了，使用幕布写的，今天整理成一篇博文，挑一些简单的活来让自己坚持写博客。\n\n## 技术\n\n根据今年的工作安排，主要集中在数据可视化和强交互的仿真软件上。所以自己技术的关注点也是围绕在这两点上。\n\n### 数据可视化\n\n相关书籍：\n- [《数据可视化之美》](https://book.douban.com/subject/6439420/)\n- [《数据之美》](https://book.douban.com/subject/25833225/)\n- [《鲜活的数据》](https://book.douban.com/subject/19952397/)\n\n目标是完成 **与潮鞋相光的可视化页面**，可能在完成的过程中还要学习数据分析的入门知识。\n\n### 设计模式\n重新看设计模式是因为强交互的仿真软件，如果不能够很好的设计模块和解耦，复杂的业务场景会把代码弄得一团糟。另外去年又开始使用  TypeScript，所以今年打算重温一下设计模式并且输出一些 TypeScript 设计模式实践的内容。\n\n相关书籍：\n- [《JavaScript设计模式》](https://book.douban.com/subject/26589719/)\n\n目标是 **用 TypeScript 实现前端相关场景，输出为系列文章**。\n\n### 函数式\n去年我都是专注在 Vue 技术栈上，因为函数式、无转态组件及无缝支持 TypeScript，打算全面转到 React 上来。目前团队项目 React 和 Vue 一半一半。还有 Rx.js 也需要一些函数式编程知识的铺垫，所以上半年要完成这些计划。\n\n相关书籍：\n- [《Haskell 趣学指南》](https://book.douban.com/subject/25803388/)\n- [《JavaScript 函数式编程指南》](https://book.douban.com/subject/30354711/)\n- [《深入浅出 RxJS》](https://book.douban.com/subject/30217949/)\n\n目标 **用函数式的思维解决某些业务问题，全面拥抱 React**。\n\n### 其他关注点\n没有放入 WebAssembly了，去年年底学习了一下 Go 语言，写了一个 WebAssembly 版本的 TodoList，真正深入去学习的话，对于 Go 或者 C/C++ 的要求才是重点。感觉暂时可以不作为主战场，碰到性能瓶颈和有优秀的解决方案应用时再去研究。\n\n今年有一个要深入的就是 V8 的一些知识了，写 JS 写了这么久，是该对 JS Runtime 去坐一些了解了，但是 V8 的资料比较少，大概只能借助 V8 的团队 [Blog](https://v8.dev/) 去学习了（[中文版](https://v8.js.cn/)）。\n\nPWA 因为我们写的大多是中后台业务，如果有一些偏工具型无网络可用场景的 WebApp 能用得上，打算上半年自己写个 Demo 实践一波。\n\n得益于 K8S，我们运行 Web 的环境都是支持 HTTP2 的，在中后台业务里应该能用上不少 HTTP2 的新特性。\n\n- PWA\n- V8\n- HTTP2\n\n### 温故基础知识\n作为一个合格的程序员，基础知识不能丢。\n\n- 数据结构\n- LeetCode 100题\n- Linux\n\n## 生活\n### 记账\n只是记录自己的支出，从年底做了这个计划来，已经完完整整的记录了一个月了，用的 App 是 [鲨鱼记账](http://www.shayujizhang.com/)。\n\n### 健身\n- 一周两次超级猩猩\n- 自己练习上肢力量\n- 增重到 60KG 的体重\n- 达到 13% 体脂率\n\n### 摄影摄像\n- 一个月整理一次照片\n- 整理放入微云\n- 两周整理一个Vlog\n\n### 阅读\n基本原则：\n- 思维导图\n- 书评\n- 小说类至少输出 140 字的短评\n\n### 书单及公开课：\n- [《杀死一只知更鸟》](https://book.douban.com/subject/6781808/)\n- [《集装箱改变世界（修订版）》](https://book.douban.com/subject/25795595/)\n\n心理学：\n- [《直觉泵和其他思考工具》](https://book.douban.com/subject/30340107/)\n- [《幸福课》](http://open.163.com/special/positivepsychology/)\n- [《领袖心理学》](http://open.163.com/special/opencourse/psychologyofleadership.html)\n\n哲学：\n- [《人生的智慧》](https://book.douban.com/subject/25867570/)\n- [《公正》](http://open.163.com/special/justice/)\n\n学习方法 & 认知\n- [《刻意练习》](https://book.douban.com/subject/26895993/)\n- [《策略思维》](https://book.douban.com/subject/26990027/)\n","tags":["个人"]},{"title":"2018年终总结","url":"/2019/01/26/2018年终总结/","content":"\n## 写在开头\n今年在人生中算是一个蛮大的转变了，工作职能上部分的转变，生活中从丈夫到为人父，物质上达成了自己的一个小心愿。部门从高楼渐起，到宾客散去，一年发生了太多。\n\n今年没有给自己立 Flag，总体的目标就是更好的生活，更好的沉淀自己，包括基础技术、前端领域、做人、看人。\n\n## 工作\n从1人的前端，到4人的前端团队，多种技术栈的尝试：\n1. React + Typescript + Antd + Redux\n2. Vue + Vuex + Nuxt.js\n3. Vue + Typescript + Vuex\n4. Nodejs\n5. 小程序\n\n### 团队建设\n团队的氛围没有，战斗力也没有汇聚和提高。这不是我的初衷，只是当事情没有符合我预期的发展时，我选择了逃避，放任不管。今年初尝团队的管理，这个状况算是好，也算是坏。对比当初的雄心壮志，是很失败的一次经历。\n\n好的一面是能够遇到最差的人，知道如何去应对这种人，在面试的时候如何去 鉴别这类人。\n\n坏处就是现在这种团队的氛围不太是我想要的，和我之前一开始的设想是完全偏离的，我其实是不太允许团队中有这种的人存在的。这或许对他人是一件不太公平的事情。\n\n### Krishna\nKrishna 也从无到有，因为后端设计的相当 Fancy，我对自己的前端整体的设计也还算满意。虽然中间的细节还有很多值得优化的地方，如果这个产品能继续走下去，还是能好好去优化它的前端部分的。包括国际化、工程的组织、前端 UI 的测试测试驱动等。\n\n### 前端导师\n第一次接受这么个活，带 10 多个 2017 年毕业生，在培训的整体规划上没有做的太好，没有把\n\n> 前端工程师首先必须是一个程序员  \n\n这个理念给传输到，是我的失职。自己之前的思考也没有那么的系统。过程中我也没有太多的去强调一些自己的技术价值观，增强自己的影响力。\n\n现在反而很怕去输出价值观了，一方面不屑你的人，说出来也不会有人理你，一方面又怕自己的价值观是错误的，很难找到一个在前端方向有对等的价值观的交流。\n\n很多的前端程序员其实是不配做一个程序员，转而成为前端。或许当年的我也是这样。\n\n和几个 leader 的沟通确特别的对等，虽然可能价值观不一定完全相同，但是可以吸收，交换彼此的观念，也让我学习到了特别多他们身上有的一些特质，专注、认真、全面、系统。每一种技术，必然会弄清楚使用场景，实现的原理，这样做的好处。\n\n## 技术\n今年关注的新的技术，大多是为了了解特定的设计模式和不同语言的编程范式。让自己的代码更加优雅。\n\n### React\n因为对函数式编程的框架实现感兴趣，用了 React 做了一定的实践，不是特别熟悉，只能算是能用，了解。\n\n### 深入了解 Vue 实现\n看了几个章节的框架实现，并没有看完，也没有能够复述 Vue 整个设计思想的能力。还需要继续的学习。\n\n### Redux\n跟着一篇原理教程，实现了 Redux 的核心功能。\n* Reducer\n* ReducerCompose\n\n### GraphQL\nGraphQL 就是用一种特定的 QL 去动态查询后台实现的 query scheme，在 scheme 内动态的获取需要的数据。\n用 Node 写 GraphQL 是一件非常简单的事情，难的是设计出一个符合业务的数据图。\n\n### Go\nGo 语言里面的一些语法特点，如：\n\n* goroutine\n* channel\n* defer\n* mutex\n\n都是一些未接触过的概念，除语言的本身，更多的是去了解不同的并发机制，它们的优势以及它们的不足。\n\n### Python\nPython 本来是我学习的第一门语言，用它来写过 web，写过脚本及爬虫。但是工作后一直用 JS，已经完全忘了 Python 了。后端人力不足，就用 Python 写了个从 hive 取数，存入 Mysql 的脚本。也算是温习了一遍 Python 语法和工程化。\n\n### WebSocket\n通过项目及一些原理解释的文章，弄清楚了 Websocket 的一些基础概念，不在流于表面，只会使用 socket.io。\n\n### 工程化\n* 团队 Git Flow\n* 一定程度的 Code Review\n* CI/CD 的流程\n\n## 生活\n### Baby 快出生了\n不知道为人父后是什么样的体验，不过我会尽我的能力让他成为一个独立，有追求的人。\n\n### 换了车\n换掉了之前的 Focus，内饰味道 3 年了还没有散掉，又准备要小孩，为了不再受毒气侵害，咬咬牙换上了最心爱的 BMW。\n\n### 健身了\n健身的地点是 SuperMonkey，坚持三个月了，加上有我妈的照顾，体重增加了 5KG，脱掉衣服看上去也不是那么瘦不拉几了。\n\n### 作息\n因为每天早上要送老婆上班，起的很早，也很少熬夜了，希望自己的老毛病在下一次复检的时候能有一些好转。\n\n## 最后\n2018年工作没什么太大的起色，尝试了角色的转换，是失败的。技术上输出分享太少。2019年必须坚持一些好的习惯、固定一些工作生活的方式了。不能这样自由散漫了。","tags":["个人"]}]